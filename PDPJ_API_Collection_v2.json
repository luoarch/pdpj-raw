{
  "info": {
    "_postman_id": "pdpj-api-v2-robust",
    "name": "PDPJ API - Enterprise Edition v2.0",
    "description": "Collection robusta e completa para a API PDPJ Enterprise Edition v2.0 com download assíncrono, webhooks e monitoramento de status - 100% testado",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "pdpj-enterprise-v2"
  },
  "item": [
    {
      "name": "🏥 Health & Status",
      "item": [
        {
          "name": "Health Check (Root)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Verificação básica de saúde da API"
          },
          "response": [
            {
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/health",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "health"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"healthy\",\n    \"environment\": \"development\",\n    \"timestamp\": \"2025-10-05T17:35:48.162971\",\n    \"request_id\": \"5cdb1551-61a8-4241-bf91-0dd075c797a7\",\n    \"version\": \"2.0.0\",\n    \"uptime_seconds\": 14.625685214996338\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.eql('healthy');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Health Check (API)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                ""
              ]
            },
            "description": "Verificação de saúde da API raiz"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Endpoints de verificação de saúde e status da API"
    },
    {
      "name": "🔐 Authentication",
      "item": [
        {
          "name": "Test Without Auth",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/processes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes"
              ]
            },
            "description": "Teste sem autenticação (deve retornar 401)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401 (Unauthorized)', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Test Invalid Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes"
              ]
            },
            "description": "Teste com token inválido (deve retornar 401)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401 (Unauthorized)', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Testes de autenticação e autorização"
    },
    {
      "name": "👤 Users",
      "item": [
        {
          "name": "List Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users"
              ]
            },
            "description": "Listar todos os usuários (requer token de admin)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "My Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/users/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "users",
                "me"
              ]
            },
            "description": "Obter perfil do usuário autenticado"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('username');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "});",
                  "",
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Endpoints de gerenciamento de usuários"
    },
    {
      "name": "📋 Processes",
      "item": [
        {
          "name": "List Processes",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes"
              ]
            },
            "description": "Listar todos os processos com paginação"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Process",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}"
              ]
            },
            "description": "Obter detalhes de um processo específico"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has process data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('process_number');",
                  "    pm.expect(jsonData).to.have.property('court');",
                  "    pm.expect(jsonData).to.have.property('subject');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "List Process Documents",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}/files",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}",
                "files"
              ]
            },
            "description": "Listar documentos de um processo específico"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has documents data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('documents');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData.documents).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Search Processes (Batch)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"process_numbers\": [\"{{test_process_number}}\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/processes/search",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "search"
              ]
            },
            "description": "Buscar múltiplos processos em lote"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has search results', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('processes');",
                  "    pm.expect(jsonData).to.have.property('total_found');",
                  "    pm.expect(jsonData.processes).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response time is less than 5000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Endpoints de consulta e gerenciamento de processos judiciais"
    },
    {
      "name": "📄 Documents",
      "item": [
        {
          "name": "Download Process Documents",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}/download-documents",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}",
                "download-documents"
              ]
            },
            "description": "Baixar todos os documentos de um processo e salvar no banco"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has download info', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('process_number');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('total_documents');",
                  "});",
                  "",
                  "pm.test('Response time is less than 10000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Endpoints de download e gerenciamento de documentos"
    },
    {
      "name": "🔄 Async Downloads & Status",
      "item": [
        {
          "name": "Get Process with Auto Download",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}?auto_download=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}"
              ],
              "query": [
                {
                  "key": "auto_download",
                  "value": "true",
                  "description": "Iniciar download automático de documentos"
                }
              ]
            },
            "description": "Buscar processo e iniciar download automático de documentos em background"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has process data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('process_number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Process with Webhook",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}?auto_download=true&webhook_url={{test_webhook_url}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}"
              ],
              "query": [
                {
                  "key": "auto_download",
                  "value": "true"
                },
                {
                  "key": "webhook_url",
                  "value": "{{test_webhook_url}}",
                  "description": "URL para receber callback quando download concluir"
                }
              ]
            },
            "description": "Buscar processo com download automático e callback via webhook"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Process download scheduled', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('process_number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Process Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}/status",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}",
                "status"
              ]
            },
            "description": "Verificar status do download de documentos de um processo"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('overall_status');",
                  "    pm.expect(jsonData).to.have.property('progress_percentage');",
                  "    pm.expect(jsonData).to.have.property('total_documents');",
                  "    pm.expect(jsonData).to.have.property('documents');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Endpoints de download assíncrono com webhook e consulta de status"
    },
    {
      "name": "🔗 Webhooks",
      "item": [
        {
          "name": "Validate Webhook URL",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"webhook_url\": \"{{test_webhook_url}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-validate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-validate"
              ]
            },
            "description": "Validar se uma URL de webhook é válida (formato, protocolo, domínio)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has validation result', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('valid');",
                  "    pm.expect(jsonData).to.have.property('url');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Test Webhook Connectivity",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"webhook_url\": \"{{test_webhook_url}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-test-connectivity",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-test-connectivity"
              ]
            },
            "description": "Testar conectividade com um webhook (verificar se está acessível)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Connectivity test completed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Send Test Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"webhook_url\": \"{{test_webhook_url}}\",\n    \"test_payload\": {\n        \"test\": true,\n        \"message\": \"Webhook de teste\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-send-test",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-send-test"
              ]
            },
            "description": "Enviar um webhook de teste com payload customizado"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Webhook sent successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Webhook Test Receiver",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"test\": true,\n    \"process_number\": \"1000145-91.2023.8.26.0597\",\n    \"status\": \"completed\",\n    \"total_documents\": 10,\n    \"completed_documents\": 10,\n    \"failed_documents\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-test-receiver",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-test-receiver"
              ]
            },
            "description": "Endpoint de teste para receber webhooks (usar como URL de callback)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Webhook received', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('received');",
                  "    pm.expect(jsonData.received).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Endpoints para validação, teste e recebimento de webhooks"
    },
    {
      "name": "🔄 Async Downloads & Status",
      "item": [
        {
          "name": "Get Process with Auto Download",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}?auto_download=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}"
              ],
              "query": [
                {
                  "key": "auto_download",
                  "value": "true",
                  "description": "Iniciar download automático de documentos"
                }
              ]
            },
            "description": "Buscar processo e iniciar download automático de documentos em background"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has process data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('process_number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Process with Webhook",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}?auto_download=true&webhook_url={{test_webhook_url}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}"
              ],
              "query": [
                {
                  "key": "auto_download",
                  "value": "true"
                },
                {
                  "key": "webhook_url",
                  "value": "{{test_webhook_url}}",
                  "description": "URL para receber callback quando download concluir"
                }
              ]
            },
            "description": "Buscar processo com download automático e callback via webhook"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Process download scheduled', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('process_number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Process Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}/status",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}",
                "status"
              ]
            },
            "description": "Verificar status do download de documentos de um processo"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('overall_status');",
                  "    pm.expect(jsonData).to.have.property('progress_percentage');",
                  "    pm.expect(jsonData).to.have.property('total_documents');",
                  "    pm.expect(jsonData).to.have.property('documents');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Endpoints de download assíncrono com webhook e consulta de status"
    },
    {
      "name": "🔗 Webhooks",
      "item": [
        {
          "name": "Validate Webhook URL",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"webhook_url\": \"{{test_webhook_url}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-validate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-validate"
              ]
            },
            "description": "Validar se uma URL de webhook é válida (formato, protocolo, domínio)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has validation result', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('valid');",
                  "    pm.expect(jsonData).to.have.property('url');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Test Webhook Connectivity",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"webhook_url\": \"{{test_webhook_url}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-test-connectivity",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-test-connectivity"
              ]
            },
            "description": "Testar conectividade com um webhook (verificar se está acessível)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Connectivity test completed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Send Test Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"webhook_url\": \"{{test_webhook_url}}\",\n    \"test_payload\": {\n        \"test\": true,\n        \"message\": \"Webhook de teste\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-send-test",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-send-test"
              ]
            },
            "description": "Enviar um webhook de teste com payload customizado"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Webhook sent successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Webhook Test Receiver",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"test\": true,\n    \"process_number\": \"1000145-91.2023.8.26.0597\",\n    \"status\": \"completed\",\n    \"total_documents\": 10,\n    \"completed_documents\": 10,\n    \"failed_documents\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-test-receiver",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-test-receiver"
              ]
            },
            "description": "Endpoint de teste para receber webhooks (usar como URL de callback)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Webhook received', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('received');",
                  "    pm.expect(jsonData.received).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Endpoints para validação, teste e recebimento de webhooks"
    },
    {
      "name": "🔄 Async Downloads & Status",
      "item": [
        {
          "name": "Get Process with Auto Download",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}?auto_download=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}"
              ],
              "query": [
                {
                  "key": "auto_download",
                  "value": "true",
                  "description": "Iniciar download automático de documentos"
                }
              ]
            },
            "description": "Buscar processo e iniciar download automático de documentos em background"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has process data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('process_number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Process with Webhook",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}?auto_download=true&webhook_url={{test_webhook_url}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}"
              ],
              "query": [
                {
                  "key": "auto_download",
                  "value": "true"
                },
                {
                  "key": "webhook_url",
                  "value": "{{test_webhook_url}}",
                  "description": "URL para receber callback quando download concluir"
                }
              ]
            },
            "description": "Buscar processo com download automático e callback via webhook"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Process download scheduled', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('process_number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Process Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/processes/{{test_process_number}}/status",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "processes",
                "{{test_process_number}}",
                "status"
              ]
            },
            "description": "Verificar status do download de documentos de um processo"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('overall_status');",
                  "    pm.expect(jsonData).to.have.property('progress_percentage');",
                  "    pm.expect(jsonData).to.have.property('total_documents');",
                  "    pm.expect(jsonData).to.have.property('documents');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Endpoints de download assíncrono com webhook e consulta de status"
    },
    {
      "name": "🔗 Webhooks",
      "item": [
        {
          "name": "Validate Webhook URL",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"webhook_url\": \"{{test_webhook_url}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-validate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-validate"
              ]
            },
            "description": "Validar se uma URL de webhook é válida (formato, protocolo, domínio)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has validation result', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('valid');",
                  "    pm.expect(jsonData).to.have.property('url');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Test Webhook Connectivity",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"webhook_url\": \"{{test_webhook_url}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-test-connectivity",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-test-connectivity"
              ]
            },
            "description": "Testar conectividade com um webhook (verificar se está acessível)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Connectivity test completed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Send Test Webhook",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{test_token}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"webhook_url\": \"{{test_webhook_url}}\",\n    \"test_payload\": {\n        \"test\": true,\n        \"message\": \"Webhook de teste\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-send-test",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-send-test"
              ]
            },
            "description": "Enviar um webhook de teste com payload customizado"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Webhook sent successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Webhook Test Receiver",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"test\": true,\n    \"process_number\": \"1000145-91.2023.8.26.0597\",\n    \"status\": \"completed\",\n    \"total_documents\": 10,\n    \"completed_documents\": 10,\n    \"failed_documents\": 0\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/v1/webhooks/webhook-test-receiver",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "webhooks",
                "webhook-test-receiver"
              ]
            },
            "description": "Endpoint de teste para receber webhooks (usar como URL de callback)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Webhook received', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('received');",
                  "    pm.expect(jsonData.received).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Endpoints para validação, teste e recebimento de webhooks"
    },
    {
      "name": "📊 Monitoring",
      "item": [
        {
          "name": "API Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/monitoring/status",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "monitoring",
                "status"
              ]
            },
            "description": "Status geral da API e sistema"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status info', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Metrics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/monitoring/metrics",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "monitoring",
                "metrics"
              ]
            },
            "description": "Métricas detalhadas do sistema"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has metrics data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('metrics');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Performance",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/monitoring/performance",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "monitoring",
                "performance"
              ]
            },
            "description": "Métricas de performance do sistema"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has performance data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('performance');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Detailed Health",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/monitoring/health/detailed",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "monitoring",
                "health",
                "detailed"
              ]
            },
            "description": "Verificação detalhada de saúde de todos os componentes"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has health data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('overall_status');",
                  "    pm.expect(jsonData).to.have.property('components');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Endpoints de monitoramento e métricas do sistema"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Log da requisição",
          "console.log('🚀 Executando:', pm.info.requestName);",
          "",
          "// Verificar se as variáveis estão definidas",
          "if (!pm.environment.get('base_url')) {",
          "    console.warn('⚠️ base_url não definida no ambiente');",
          "}",
          "",
          "if (!pm.environment.get('test_token') && pm.info.requestName.includes('test_token')) {",
          "    console.warn('⚠️ test_token não definida no ambiente');",
          "}",
          "",
          "if (!pm.environment.get('admin_token') && pm.info.requestName.includes('admin_token')) {",
          "    console.warn('⚠️ admin_token não definida no ambiente');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Log da resposta",
          "console.log('📊 Status:', pm.response.status, '| Tempo:', pm.response.responseTime + 'ms');",
          "",
          "// Teste global de tempo de resposta",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(30000); // 30 segundos máximo",
          "});",
          "",
          "// Teste global de formato JSON",
          "if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
          "    pm.test('Response is valid JSON', function () {",
          "        pm.response.to.be.json;",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "test_token",
      "value": "pdpj_test_b3Xd4tVTqsXrKzJ_sIinewIxmsinYTaIf6KFK9XINvM",
      "type": "string"
    },
    {
      "key": "admin_token",
      "value": "pdpj_admin_xYlOkmPaK9oO0xe_BdhoGBZvALr7YuHKI0gTgePAbZU",
      "type": "string"
    },
    {
      "key": "test_process_number",
      "value": "10001459120238260597",
      "type": "string"
    },
    {
      "key": "test_webhook_url",
      "value": "http://localhost:8000/api/v1/webhooks/webhook-test-receiver",
      "type": "string"
    }
  ]
}