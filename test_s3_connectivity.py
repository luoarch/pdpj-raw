#!/usr/bin/env python3
"""
Script de diagn√≥stico completo para testar conectividade com AWS S3
"""

import os
import sys
import asyncio
from pathlib import Path
from loguru import logger
from dotenv import load_dotenv

# Configurar logging
logger.remove()
logger.add(sys.stdout, format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <level>{message}</level>")
logger.add("test_s3_connectivity.log", rotation="1 MB")

async def test_env_variables():
    """Teste 1: Verificar se as vari√°veis de ambiente est√£o configuradas"""
    logger.info("=" * 80)
    logger.info("TESTE 1: Verificando vari√°veis de ambiente no .env")
    logger.info("=" * 80)
    
    # Carregar .env explicitamente
    env_path = Path(".env")
    if env_path.exists():
        logger.info(f"‚úÖ Arquivo .env encontrado: {env_path.absolute()}")
        load_dotenv(override=True)
    else:
        logger.error(f"‚ùå Arquivo .env N√ÉO encontrado em: {env_path.absolute()}")
        return False
    
    # Vari√°veis necess√°rias
    required_vars = {
        "AWS_ACCESS_KEY_ID": "Chave de acesso AWS",
        "AWS_SECRET_ACCESS_KEY": "Chave secreta AWS",
        "AWS_REGION": "Regi√£o AWS",
        "S3_BUCKET_NAME": "Nome do bucket S3"
    }
    
    all_present = True
    for var, description in required_vars.items():
        value = os.getenv(var)
        if value:
            # Mascarar valores sens√≠veis
            if "SECRET" in var or "KEY" in var:
                masked = f"{value[:8]}...{value[-4:]}" if len(value) > 12 else "***"
                logger.info(f"‚úÖ {var}: {masked} ({len(value)} caracteres)")
            else:
                logger.info(f"‚úÖ {var}: {value}")
        else:
            logger.error(f"‚ùå {var} N√ÉO est√° definida! ({description})")
            all_present = False
    
    if all_present:
        logger.success("\n‚úÖ Todas as vari√°veis de ambiente necess√°rias est√£o presentes!\n")
        return True
    else:
        logger.error("\n‚ùå Algumas vari√°veis de ambiente est√£o faltando!\n")
        return False

async def test_settings_import():
    """Teste 2: Verificar se as configura√ß√µes est√£o sendo importadas corretamente"""
    logger.info("=" * 80)
    logger.info("TESTE 2: Verificando importa√ß√£o das configura√ß√µes")
    logger.info("=" * 80)
    
    try:
        from app.core.config import settings
        
        logger.info("‚úÖ M√≥dulo settings importado com sucesso")
        
        # Verificar se as credenciais foram carregadas
        aws_access_key = settings.aws_access_key_id.get_secret_value()
        aws_secret_key = settings.aws_secret_access_key.get_secret_value()
        region = settings.aws_region
        bucket = settings.s3_bucket_name
        
        logger.info(f"‚úÖ AWS Access Key ID: {aws_access_key[:8]}...{aws_access_key[-4:]} ({len(aws_access_key)} chars)")
        logger.info(f"‚úÖ AWS Secret Key: {aws_secret_key[:8]}...{aws_secret_key[-4:]} ({len(aws_secret_key)} chars)")
        logger.info(f"‚úÖ AWS Region: {region}")
        logger.info(f"‚úÖ S3 Bucket: {bucket}")
        
        logger.success("\n‚úÖ Configura√ß√µes carregadas corretamente!\n")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao importar configura√ß√µes: {e}")
        logger.exception("Detalhes do erro:")
        return False

async def test_s3_service_init():
    """Teste 3: Verificar se o S3Service inicializa corretamente"""
    logger.info("=" * 80)
    logger.info("TESTE 3: Verificando inicializa√ß√£o do S3Service")
    logger.info("=" * 80)
    
    try:
        from app.services.s3_service import s3_service
        
        logger.info("‚úÖ S3Service importado com sucesso")
        logger.info(f"‚úÖ Bucket configurado: {s3_service.bucket_name}")
        logger.info(f"‚úÖ Regi√£o configurada: {s3_service.region}")
        logger.info(f"‚úÖ Access Key ID: {str(s3_service.access_key_id)[:8]}...")
        
        logger.success("\n‚úÖ S3Service inicializado corretamente!\n")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar S3Service: {e}")
        logger.exception("Detalhes do erro:")
        return False

async def test_s3_connection():
    """Teste 4: Verificar conectividade real com AWS S3"""
    logger.info("=" * 80)
    logger.info("TESTE 4: Testando conectividade com AWS S3")
    logger.info("=" * 80)
    
    try:
        import aioboto3
        from app.core.config import settings
        
        # Criar sess√£o
        session = aioboto3.Session(
            aws_access_key_id=settings.aws_access_key_id.get_secret_value(),
            aws_secret_access_key=settings.aws_secret_access_key.get_secret_value(),
            region_name=settings.aws_region
        )
        
        logger.info("üì° Tentando conectar ao AWS S3...")
        
        # Testar listagem de buckets
        async with session.client('s3') as s3:
            logger.info("üîç Listando buckets dispon√≠veis...")
            response = await s3.list_buckets()
            
            buckets = response.get('Buckets', [])
            logger.success(f"‚úÖ Conectado com sucesso! Encontrados {len(buckets)} buckets:")
            
            for bucket in buckets:
                bucket_name = bucket['Name']
                creation_date = bucket['CreationDate'].strftime("%Y-%m-%d %H:%M:%S")
                
                if bucket_name == settings.s3_bucket_name:
                    logger.success(f"  üéØ {bucket_name} (criado em {creation_date}) ‚Üê Bucket configurado")
                else:
                    logger.info(f"  üì¶ {bucket_name} (criado em {creation_date})")
        
        logger.success("\n‚úÖ Conectividade com AWS S3 verificada!\n")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao conectar com AWS S3: {e}")
        logger.exception("Detalhes do erro:")
        
        # Sugest√µes de troubleshooting
        logger.warning("\nüí° Poss√≠veis causas:")
        logger.warning("  1. Credenciais AWS incorretas ou expiradas")
        logger.warning("  2. Regi√£o AWS incorreta")
        logger.warning("  3. Permiss√µes IAM insuficientes")
        logger.warning("  4. Problemas de conectividade de rede")
        logger.warning("  5. Firewall bloqueando acesso √† AWS")
        
        return False

async def test_bucket_exists():
    """Teste 5: Verificar se o bucket configurado existe e est√° acess√≠vel"""
    logger.info("=" * 80)
    logger.info("TESTE 5: Verificando bucket configurado")
    logger.info("=" * 80)
    
    try:
        from app.services.s3_service import s3_service
        
        bucket_name = s3_service.bucket_name
        logger.info(f"üîç Verificando bucket: {bucket_name}")
        
        exists = await s3_service.bucket_exists()
        
        if exists:
            logger.success(f"‚úÖ Bucket '{bucket_name}' existe e est√° acess√≠vel!")
            
            # Obter informa√ß√µes adicionais do bucket
            async with s3_service.session.client('s3') as s3:
                try:
                    # Obter regi√£o do bucket
                    location = await s3.get_bucket_location(Bucket=bucket_name)
                    region = location.get('LocationConstraint') or 'us-east-1'
                    logger.info(f"üìç Regi√£o do bucket: {region}")
                    
                    # Verificar ACL (permiss√µes)
                    acl = await s3.get_bucket_acl(Bucket=bucket_name)
                    owner = acl.get('Owner', {}).get('DisplayName', 'N/A')
                    logger.info(f"üë§ Propriet√°rio: {owner}")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel obter informa√ß√µes adicionais: {e}")
            
            logger.success("\n‚úÖ Bucket verificado com sucesso!\n")
            return True
        else:
            logger.error(f"‚ùå Bucket '{bucket_name}' N√ÉO existe ou n√£o est√° acess√≠vel!")
            logger.warning("\nüí° A√ß√µes sugeridas:")
            logger.warning(f"  1. Criar o bucket '{bucket_name}' no console AWS")
            logger.warning(f"  2. Verificar se o nome est√° correto no .env")
            logger.warning(f"  3. Verificar permiss√µes IAM para acessar o bucket")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar bucket: {e}")
        logger.exception("Detalhes do erro:")
        return False

async def test_s3_operations():
    """Teste 6: Testar opera√ß√µes b√°sicas de upload e download"""
    logger.info("=" * 80)
    logger.info("TESTE 6: Testando opera√ß√µes b√°sicas (upload/download)")
    logger.info("=" * 80)
    
    try:
        from app.services.s3_service import s3_service
        import uuid
        
        # Gerar nome √∫nico para o teste
        test_id = str(uuid.uuid4())[:8]
        test_key = f"test/connectivity-test-{test_id}.txt"
        test_content = f"Teste de conectividade S3 - {test_id}".encode('utf-8')
        
        logger.info(f"üì§ Tentando upload de arquivo de teste: {test_key}")
        
        # Upload de teste
        async with s3_service.session.client('s3') as s3:
            await s3.put_object(
                Bucket=s3_service.bucket_name,
                Key=test_key,
                Body=test_content,
                ContentType='text/plain'
            )
        
        logger.success(f"‚úÖ Upload bem-sucedido!")
        
        # Download de teste
        logger.info(f"üì• Tentando download do arquivo de teste...")
        
        async with s3_service.session.client('s3') as s3:
            response = await s3.get_object(
                Bucket=s3_service.bucket_name,
                Key=test_key
            )
            downloaded_content = await response['Body'].read()
        
        if downloaded_content == test_content:
            logger.success(f"‚úÖ Download bem-sucedido! Conte√∫do corresponde.")
        else:
            logger.error(f"‚ùå Conte√∫do baixado n√£o corresponde ao original!")
            return False
        
        # Limpar arquivo de teste
        logger.info(f"üßπ Removendo arquivo de teste...")
        
        async with s3_service.session.client('s3') as s3:
            await s3.delete_object(
                Bucket=s3_service.bucket_name,
                Key=test_key
            )
        
        logger.success(f"‚úÖ Arquivo de teste removido com sucesso!")
        
        logger.success("\n‚úÖ Todas as opera√ß√µes S3 funcionando corretamente!\n")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao testar opera√ß√µes S3: {e}")
        logger.exception("Detalhes do erro:")
        return False

async def test_s3_health():
    """Teste 7: Executar health check completo do S3Service"""
    logger.info("=" * 80)
    logger.info("TESTE 7: Health check do S3Service")
    logger.info("=" * 80)
    
    try:
        from app.services.s3_service import s3_service
        
        logger.info("üè• Executando health check...")
        
        health = await s3_service.health_check()
        
        if health.get('status') == 'healthy':
            logger.success("‚úÖ S3Service est√° saud√°vel!")
            
            # Mostrar detalhes
            for key, value in health.items():
                if key != 'status':
                    logger.info(f"  {key}: {value}")
        else:
            logger.error("‚ùå S3Service reportou problemas:")
            logger.error(f"  Status: {health.get('status')}")
            logger.error(f"  Detalhes: {health.get('details', 'N/A')}")
            return False
        
        logger.success("\n‚úÖ Health check passou!\n")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro no health check: {e}")
        logger.exception("Detalhes do erro:")
        return False

async def main():
    """Executar todos os testes"""
    logger.info("üöÄ INICIANDO DIAGN√ìSTICO DE CONECTIVIDADE AWS S3")
    logger.info("=" * 80)
    logger.info("")
    
    results = []
    
    # Teste 1: Vari√°veis de ambiente
    result1 = await test_env_variables()
    results.append(("Vari√°veis de ambiente", result1))
    
    if not result1:
        logger.error("‚ùå N√£o √© poss√≠vel continuar sem as vari√°veis de ambiente corretas.")
        logger.error("üí° Verifique seu arquivo .env e tente novamente.")
        return
    
    # Teste 2: Importa√ß√£o de configura√ß√µes
    result2 = await test_settings_import()
    results.append(("Importa√ß√£o de configura√ß√µes", result2))
    
    if not result2:
        logger.error("‚ùå N√£o √© poss√≠vel continuar sem carregar as configura√ß√µes.")
        return
    
    # Teste 3: Inicializa√ß√£o do S3Service
    result3 = await test_s3_service_init()
    results.append(("Inicializa√ß√£o S3Service", result3))
    
    if not result3:
        logger.error("‚ùå N√£o √© poss√≠vel continuar sem inicializar o S3Service.")
        return
    
    # Teste 4: Conectividade S3
    result4 = await test_s3_connection()
    results.append(("Conectividade AWS S3", result4))
    
    if not result4:
        logger.error("‚ùå N√£o √© poss√≠vel continuar sem conectividade com AWS S3.")
        return
    
    # Teste 5: Verifica√ß√£o do bucket
    result5 = await test_bucket_exists()
    results.append(("Verifica√ß√£o do bucket", result5))
    
    if not result5:
        logger.warning("‚ö†Ô∏è Bucket n√£o encontrado, mas continuando com os testes...")
    
    # Teste 6: Opera√ß√µes b√°sicas
    if result5:  # S√≥ testar se o bucket existe
        result6 = await test_s3_operations()
        results.append(("Opera√ß√µes b√°sicas", result6))
    
    # Teste 7: Health check
    result7 = await test_s3_health()
    results.append(("Health check", result7))
    
    # Resumo final
    logger.info("\n" + "=" * 80)
    logger.info("üìä RESUMO DOS TESTES")
    logger.info("=" * 80)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        symbol = "‚úÖ" if result else "‚ùå"
        status = "PASSOU" if result else "FALHOU"
        logger.info(f"{symbol} {test_name}: {status}")
        
        if result:
            passed += 1
        else:
            failed += 1
    
    logger.info("")
    logger.info(f"Total: {passed} passaram, {failed} falharam")
    
    if failed == 0:
        logger.success("\nüéâ TODOS OS TESTES PASSARAM! S3 est√° configurado e funcionando corretamente!")
    else:
        logger.error(f"\n‚ùå {failed} teste(s) falharam. Verifique os logs acima para detalhes.")
    
    logger.info("\nüèÅ Diagn√≥stico conclu√≠do")

if __name__ == "__main__":
    asyncio.run(main())

