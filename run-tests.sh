#!/bin/bash

# Script para executar testes automatizados da API PDPJ
# Requer: newman (npm install -g newman)

echo "üöÄ Iniciando testes automatizados da API PDPJ"
echo "=============================================="

# Verificar se newman est√° instalado
if ! command -v newman &> /dev/null; then
    echo "‚ùå Newman n√£o encontrado. Instale com: npm install -g newman"
    exit 1
fi

# Verificar se arquivos existem
if [ ! -f "PDPJ_API_Collection_v2.json" ]; then
    echo "‚ùå Collection n√£o encontrada: PDPJ_API_Collection_v2.json"
    exit 1
fi

if [ ! -f "PDPJ_API_Environment.json" ]; then
    echo "‚ùå Environment n√£o encontrado: PDPJ_API_Environment.json"
    exit 1
fi

# Criar diret√≥rio para relat√≥rios
mkdir -p reports

echo "üìã Executando Health Check..."
newman run PDPJ_API_Collection_v2.json \
    -e PDPJ_API_Environment.json \
    --folder "üè• Health Check" \
    --reporters cli,json \
    --reporter-json-export reports/health-check.json

echo ""
echo "üë§ Testando Funcionalidades de Usu√°rio..."
newman run PDPJ_API_Collection_v2.json \
    -e PDPJ_API_Environment.json \
    --folder "üë§ Usu√°rios" \
    --reporters cli,json \
    --reporter-json-export reports/users.json

echo ""
echo "üìã Testando Funcionalidades de Processos..."
newman run PDPJ_API_Collection_v2.json \
    -e PDPJ_API_Environment.json \
    --folder "üìã Processos" \
    --reporters cli,json \
    --reporter-json-export reports/processes.json

echo ""
echo "üìÑ Testando Funcionalidades de Documentos..."
newman run PDPJ_API_Collection_v2.json \
    -e PDPJ_API_Environment.json \
    --folder "üìÑ Documentos" \
    --reporters cli,json \
    --reporter-json-export reports/documents.json

echo ""
echo "üß™ Executando Testes de Stress..."
newman run PDPJ_API_Collection_v2.json \
    -e PDPJ_API_Environment.json \
    --folder "üß™ Testes de Stress" \
    --reporters cli,json \
    --reporter-json-export reports/stress.json

echo ""
echo "üìä Executando Monitoramento..."
newman run PDPJ_API_Collection_v2.json \
    -e PDPJ_API_Environment.json \
    --folder "üìä Monitoramento" \
    --reporters cli,json \
    --reporter-json-export reports/monitoring.json

echo ""
echo "üîß Testando Configura√ß√µes..."
newman run PDPJ_API_Collection_v2.json \
    -e PDPJ_API_Environment.json \
    --folder "üîß Configura√ß√µes" \
    --reporters cli,json \
    --reporter-json-export reports/config.json

echo ""
echo "üìà Gerando Relat√≥rio Completo..."
newman run PDPJ_API_Collection_v2.json \
    -e PDPJ_API_Environment.json \
    --reporters cli,html \
    --reporter-html-export reports/complete-report.html

echo ""
echo "‚úÖ Testes conclu√≠dos!"
echo "üìä Relat√≥rios salvos em: ./reports/"
echo "üåê Abra reports/complete-report.html para ver o relat√≥rio completo"

# Verificar se houve falhas
if [ -f "reports/health-check.json" ]; then
    echo ""
    echo "üîç Resumo dos Resultados:"
    echo "========================"
    
    # Contar falhas em cada categoria
    for report in reports/*.json; do
        if [ -f "$report" ]; then
            category=$(basename "$report" .json)
            failures=$(jq -r '.run.failures | length' "$report" 2>/dev/null || echo "0")
            if [ "$failures" != "0" ]; then
                echo "‚ùå $category: $failures falhas"
            else
                echo "‚úÖ $category: OK"
            fi
        fi
    done
fi

echo ""
echo "üéØ Para executar testes espec√≠ficos:"
echo "newman run PDPJ_API_Collection_v2.json -e PDPJ_API_Environment.json --folder \"Nome da Pasta\""
