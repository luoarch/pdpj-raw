"""
Gerenciador de sess√µes para a API PDPJ.
Mant√©m cookies de sess√£o ativos para melhorar taxa de sucesso nos downloads.
"""

import asyncio
import httpx
from typing import Optional, Dict, Any
from loguru import logger
from datetime import datetime, timedelta
import re
import hashlib


class SessionManager:
    """Gerenciador de sess√µes para manter cookies ativos com cache inteligente."""
    
    def __init__(self, base_url: str, token: str):
        self.base_url = base_url
        self.token = token
        self.session_cookie: Optional[str] = None
        self.session_expires: Optional[datetime] = None
        self._lock = asyncio.Lock()
        
        # Cache de sess√µes por token (para m√∫ltiplas inst√¢ncias)
        self._session_cache: Dict[str, Dict[str, Any]] = {}
        self._cache_ttl = timedelta(minutes=25)  # TTL menor que expira√ß√£o real (30min)
        
    async def get_session_cookie(self) -> Optional[str]:
        """Obter cookie de sess√£o ativo ou criar um novo com cache inteligente."""
        async with self._lock:
            # Gerar chave de cache baseada no token
            token_hash = hashlib.md5(self.token.encode()).hexdigest()
            
            # Verificar cache global primeiro
            if token_hash in self._session_cache:
                cached_session = self._session_cache[token_hash]
                if datetime.now() < cached_session['expires']:
                    logger.debug(f"üç™ Usando cookie de sess√£o do cache: {cached_session['cookie'][:20]}...")
                    return cached_session['cookie']
                else:
                    # Cache expirado, remover
                    del self._session_cache[token_hash]
            
            # Verificar se temos um cookie v√°lido local
            if self.session_cookie and self.session_expires and datetime.now() < self.session_expires:
                logger.debug(f"üç™ Usando cookie de sess√£o local: {self.session_cookie[:20]}...")
                # Atualizar cache global
                self._session_cache[token_hash] = {
                    'cookie': self.session_cookie,
                    'expires': self.session_expires
                }
                return self.session_cookie
            
            # Criar nova sess√£o
            await self._create_new_session()
            
            # Atualizar cache global se sess√£o foi criada com sucesso
            if self.session_cookie and self.session_expires:
                self._session_cache[token_hash] = {
                    'cookie': self.session_cookie,
                    'expires': self.session_expires
                }
            
            return self.session_cookie
    
    async def _create_new_session(self):
        """Criar uma nova sess√£o acessando a p√°gina do portal."""
        try:
            logger.info("üîÑ Criando nova sess√£o...")
            
            # Headers para simular navegador
            headers = {
                "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                "accept-encoding": "gzip, deflate, br, zstd",
                "accept-language": "pt-BR,pt;q=0.9,en;q=0.8",
                "authorization": f"Bearer {self.token}",
                "sec-ch-ua": '"Chromium";v="140", "Not=A?Brand";v="24", "Google Chrome";v="140"',
                "sec-ch-ua-mobile": "?0",
                "sec-ch-ua-platform": '"macOS"',
                "sec-fetch-dest": "document",
                "sec-fetch-mode": "navigate",
                "sec-fetch-site": "none",
                "sec-fetch-user": "?1",
                "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36"
            }
            
            # Acessar p√°gina principal do portal para estabelecer sess√£o
            portal_url = f"{self.base_url.replace('/api/v2', '')}/consulta/autosdigitais"
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(portal_url, headers=headers)
                
                if response.status_code == 200:
                    # Extrair JSESSIONID dos cookies
                    set_cookies = response.headers.get_list('set-cookie')
                    for cookie in set_cookies:
                        if 'JSESSIONID=' in cookie:
                            # Extrair JSESSIONID
                            match = re.search(r'JSESSIONID=([^;]+)', cookie)
                            if match:
                                self.session_cookie = match.group(1)
                                # Sess√£o v√°lida por 30 minutos
                                self.session_expires = datetime.now() + timedelta(minutes=30)
                                logger.success(f"‚úÖ Nova sess√£o criada: {self.session_cookie[:20]}...")
                                return
                    
                    logger.warning("‚ö†Ô∏è Sess√£o criada mas JSESSIONID n√£o encontrado")
                else:
                    logger.error(f"‚ùå Erro ao criar sess√£o: {response.status_code}")
                    
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar nova sess√£o: {e}")
    
    async def refresh_session(self):
        """For√ßar renova√ß√£o da sess√£o."""
        async with self._lock:
            self.session_cookie = None
            self.session_expires = None
            await self._create_new_session()
    
    def is_session_valid(self) -> bool:
        """Verificar se a sess√£o atual √© v√°lida."""
        return (self.session_cookie is not None and 
                self.session_expires is not None and 
                datetime.now() < self.session_expires)


# Inst√¢ncia global do gerenciador de sess√µes
_session_manager: Optional[SessionManager] = None


def get_session_manager(base_url: str, token: str) -> SessionManager:
    """Obter inst√¢ncia global do gerenciador de sess√µes."""
    global _session_manager
    if _session_manager is None:
        _session_manager = SessionManager(base_url, token)
    return _session_manager


async def get_active_session_cookie(base_url: str, token: str) -> Optional[str]:
    """Obter cookie de sess√£o ativo."""
    manager = get_session_manager(base_url, token)
    return await manager.get_session_cookie()
